name: 'testing-conda-environment'
description: 'Test a conda environment of a specific python version against all beamlines'
inputs:
  run-id:
    description: 'workflow run id from github'
    required: true
  test-conda-packed-name:
    description: 'name of the conda-packd environment, e.g: 2024-2.3-py311-tiled'
    required: true
  org:
    required: true
    description: 'github org'
  repo:
    required: true
    description: 'github repository name'
  branch:
    required: true
    description: 'git branch name'
  beamline-acronym:
    required: true
    description: 'beamline tla'
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Cloning Remote Repositories
      run: |
        mkdir "${{ inputs.repo }}"
        git clone -b ${{ inputs.branch }} "${REPO_URL}" "${{ inputs.repo }}"
      env:
        REPO_URL: "https://github.com/${{ inputs.org }}/${{ inputs.repo }}"
      shell: bash
    - name: Set Up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: Beamline Specific Configurations
      run: python3 ${ACTION_PATH}/special_config.py -b "${{ inputs.beamline_acronym }}"
      env:
        ACTION_PATH: ${{ github.action_path }}
      shell: bash
    - name: Setting up Blackhole IOC
      run: |
        python3 -m pip install -U caproto
        echo | python3 -m caproto.ioc_examples.pathological.spoof_beamline &
        trap 'kill -SIGINT %1; echo exiting...' EXIT
        sudo ln -svf caproto-repeater "/bin/caRepeater"
      shell: bash
    - name: Checking Blackhole IOC PV's
      run: |
        sudo pip install supervisor
        chmod +x ${ACTION_PATH}/supervisor/start_supervisor.sh
        ${ACTION_PATH}/supervisor/start_supervisor.sh status
      env:
        ACTION_PATH: ${{ github.action_path }}
      shell: bash
    - name: Download Artifacts
      run: python3 ${ACTION_PATH}/parse_for_artifacts.py -a "${{ inputs.run-id }}" -c "${{ inputs.test-conda-packed-name }}"
      env:
        GHA_TOKEN: ${{ github.token }}
        GH_TOKEN: ${{ github.token }}
        ACTION_PATH: ${{ github.action_path }}
      shell: bash
#    - name: See environment
#      run: |
#        ls
#        pwd
#      shell: bash
    - name: Configuring defaults (pyOlog, databroker, and kafka)
      run: |
        echo "pyOlog config:"
        wget https://raw.githubusercontent.com/NSLS-II/profile-collection-ci/master/configs/pyOlog.conf -O $HOME/.pyOlog.conf
        cat $HOME/.pyOlog.conf

        echo "Classic databroker v0/v1 config:"
        databroker_conf_dir="$HOME/.config/databroker"
        beamline_acronym="${BEAMLINE_ACRONYM,,}"
        databroker_bl_conf="${beamline_acronym}.yml"
        mkdir -v -p ${databroker_conf_dir}
        wget https://raw.githubusercontent.com/NSLS-II/profile-collection-ci/master/configs/databroker.yml -O ${databroker_conf_dir}/_legacy_config.yml
        cp -v ${databroker_conf_dir}/_legacy_config.yml ${databroker_conf_dir}/${databroker_bl_conf}
        cat ${databroker_conf_dir}/_legacy_config.yml
        cat ${databroker_conf_dir}/${databroker_bl_conf}

        echo "Tiled profile config:"
        tiled_profiles_dir="$HOME/.config/tiled/profiles/"
        mkdir -v -p "${tiled_profiles_dir}"
        sed 's/^  //' << EOF > "${tiled_profiles_dir}/profiles.yml"
        ${beamline_acronym:-local}:
          direct:
            authentication:
              allow_anonymous_access: true
            trees:
            - tree: databroker.mongo_normalized:Tree.from_uri
              path: /
              args:
                uri: mongodb://localhost:27017/metadatastore-local
                asset_registry_uri: mongodb://localhost:27017/asset-registry-local
        EOF
          cat ${tiled_profiles_dir}/profiles.yml

          echo "Kafka config:"
          sed 's/^  //' << EOF > kafka.yml
          ---
            abort_run_on_kafka_exception: false
            bootstrap_servers:
              - localhost:9092
            runengine_producer_config:
              security.protocol: PLAINTEXT
        EOF

          echo "SUDO: Placing kafka config in /etc/bluesky"
          sudo mkdir -v -p /etc/bluesky/
          sudo mv -v kafka.yml /etc/bluesky/kafka.yml
          cat /etc/bluesky/kafka.yml
      shell: bash
    - name: Extracting, Activating and Unpacking Conda Artifact
      run: |
        unzip -v "${{ inputs.test-conda-packed-name }}.zip"
        mkdir -v -p "${CONDA_PREFIX}/envs/${{ inputs.test-conda-packed-name }}"
        tar -xf "${{ inputs.test-conda-packed-name }}.tar.gz" -C "${CONDA_PREFIX}/envs/${{ inputs.test-conda-packed-name }}"
        set +u
        eval "$(conda shell.bash hook)"
        echo ${CONDA_PREFIX}
        conda activate "home/runner/miniconda/envs/${{ inputs.test-conda-packed-name }}"
        echo ${CONDA_PREFIX}
        conda unpack && echo "Unpacked successfully!"
        set -u
        conda env list
        ls
        pwd
      env:
        CONDA_PREFIX: home/runner/miniconda
      shell: bash
    - name: Configuring Redis
      uses: supercharge/redis-github-action@1.8.0
      with:
        redis-version: latest
    - name: Configuring Mongo
      uses: supercharge/mongodb-github-action@1.11.0
      with:
        mongodb-version: '4.4'
    - name: Performing Beamline Actions
      env:
        BEAMLINE_ACRONYM: ${{ inputs.beamline_acronym }}
      run: |
        echo "Performing beamline-specific tasks..."
        cfg_dir="/nsls2/data/$BEAMLINE_ACRONYM/shared/config"
        if [[ ! -d "$cfg_dir" ]]; then
          sudo mkdir -v -p "$cfg_dir" ||
          (
            echo "Error: Couldn't create dir: $cfg_dir"
            exit 1
          )
        fi
      shell: bash
    - name: Activate IPython Profile
      run: |
        set -eo pipefail
        eval "$(conda shell.bash hook)"
        conda activate "home/runner/miniconda/envs/${{ inputs.test-conda-packed-name }}"

        for tiled_profile_name in nsls2 ${{ inputs.beamline_acronym }}; do
          tiled profile create --name $tiled_profile_name http://127.0.0.1:8000
        done
        export TILED_API_KEY=secret
        nohup tiled serve catalog --temp --api-key=$TILED_API_KEY &
        sleep 10
        ipython --profile-dir "${{ inputs.repo }}"
      shell: bash
#    - name: Print inputs
#      shell: bash
#      run: |
#        echo "${{ inputs.python-version }}"
#        echo "${{ inputs.org }}"
#        echo "${{ inputs.repo }}"
#        echo "${{ inputs.branch }}"
#        echo "${{ inputs.beamline-acronym }}"
#    - name: Set GitHub Path
#      shell: bash
#      run: echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
#      env:
#        GITHUB_ACTION_PATH: ${{ github.action_path }}
